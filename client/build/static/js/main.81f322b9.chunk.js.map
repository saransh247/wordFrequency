{"version":3,"sources":["Components/table.js","App.js","serviceWorker.js","index.js"],"names":["table","props","srNo","title","val","App","state","tData","no_of_rec","getTable","fetch","then","res","json","resdata","temp","Object","entries","d","setState","Number","document","getElementById","value","catch","err","console","log","x","this","length","push","i","key","className","id","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sNAYeA,G,MAVD,SAACC,GACX,OACI,4BACI,4BAAKA,EAAMC,MACX,4BAAKD,EAAME,OACX,4BAAKF,EAAMG,QCiDRC,E,4MAnDbC,MAAQ,CACNC,MAAO,GACPC,UAAW,G,EAGbC,SAAW,WACTC,MAAM,kCACHC,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GAGJ,IAAIC,EAAOC,OAAOC,QAAQH,EAAQI,GAElC,EAAKC,SAAS,CAAEZ,MAAOQ,EAAMP,UAAWY,OAAOC,SAASC,eAAe,WAAWC,OAASH,OAAO,QAGnGI,OAAM,SAAAC,GACLC,QAAQC,IAAIF,O,uDAOhB,IAAMG,EAAI,GACV,GAAIC,KAAKvB,MAAMC,MAAMuB,QAAUD,KAAKvB,MAAME,UAAW,CACnDoB,EAAEG,KAAK,4BAAI,sCAAe,oCAAa,2CACvC,IAAK,IAAIC,EAAI,EAAGA,EAAIH,KAAKvB,MAAME,UAAWwB,IACxCJ,EAAEG,KAAK,kBAAC,EAAD,CAAQE,IAAKD,EAAI,EAAG9B,KAAM8B,EAAI,EAAG7B,MAAO0B,KAAKvB,MAAMC,MAAMyB,GAAG,GAAI5B,IAAKyB,KAAKvB,MAAMC,MAAMyB,GAAG,MAIpG,OACE,yBAAKE,UAAU,OACb,2BAAOC,GAAG,UAAUC,KAAK,WACzB,4BAAQC,QAASR,KAAKpB,UAAtB,iBACA,yBAAKyB,UAAU,QACL,IAAbN,EAAEE,OAAe,2DAAsCD,KAAKvB,MAAMC,MAAMuB,OAASD,KAAKvB,MAAME,UAAY,oDAA0BqB,KAAKvB,MAAMC,MAAMuB,QAAa,2BAAOK,GAAG,SACnK,+BACGP,U,GA1CGU,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzB,SAASC,eAAe,SDyHpB,kBAAmByB,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEd3B,OAAM,SAAA4B,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.81f322b9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst table = (props) => {\r\n    return (\r\n        <tr>\r\n            <td>{props.srNo}</td>\r\n            <td>{props.title}</td>\r\n            <td>{props.val}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default table;","import React, { Component } from 'react';\nimport './App.css';\nimport TableV from './Components/table';\n\nclass App extends Component {\n  state = {\n    tData: [],\n    no_of_rec: 0\n  }\n\n  getTable = () => {\n    fetch(\"http://localhost:3005/getFreq?\")\n      .then(res => {\n        return res.json();\n      })\n      .then(resdata => {\n        // console.log(resdata.d);\n        // console.log(Object.entries(resdata.d));\n        var temp = Object.entries(resdata.d);\n        // console.log(typeof (temp));\n        this.setState({ tData: temp, no_of_rec: Number(document.getElementById(\"no_rows\").value) + Number(2) });\n        // console.log(this.state.no_of_rec);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n  }\n\n\n\n  render() {\n    const x = [];\n    if (this.state.tData.length >= this.state.no_of_rec) {\n      x.push(<tr><th>Sr No.</th><th>Word</th><th>Frequency</th></tr>)\n      for (var i = 2; i < this.state.no_of_rec; i++) {\n        x.push(<TableV key={i - 1} srNo={i - 1} title={this.state.tData[i][0]} val={this.state.tData[i][1]} />);\n      }\n    }\n    \n    return (\n      <div className=\"App\">\n        <input id=\"no_rows\" type=\"number\" />\n        <button onClick={this.getTable}>GET FREQUENCY</button>\n        <div className=\"main\">\n    {x.length === 1 ? <p>Enter value to get frequency</p> : this.state.tData.length < this.state.no_of_rec ? <p>Enter value less than {this.state.tData.length}</p> :<table id=\"words\">\n            <tbody>\n              {x}\n            </tbody>\n          </table>}\n          \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}